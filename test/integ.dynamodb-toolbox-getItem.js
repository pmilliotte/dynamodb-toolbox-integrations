"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_cdk_lib_1 = require("aws-cdk-lib");
const entity_1 = require("./dynamodb-toolbox/entity");
const aws_stepfunctions_1 = require("aws-cdk-lib/aws-stepfunctions");
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const path = require("path");
const lib_1 = require("../lib");
const integ_tests_alpha_1 = require("@aws-cdk/integ-tests-alpha");
const aws_lambda_nodejs_1 = require("aws-cdk-lib/aws-lambda-nodejs");
const app = new aws_cdk_lib_1.App();
class TestStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id) {
        super(scope, id);
        const testTable = new aws_dynamodb_1.Table(this, "BigTable", {
            partitionKey: { name: "type", type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: "id", type: aws_dynamodb_1.AttributeType.STRING },
            tableName: "Test",
            billingMode: aws_dynamodb_1.BillingMode.PAY_PER_REQUEST,
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
        });
        // // Put item lambda
        const lambdaPutItemRole = new aws_iam_1.Role(this, "DynamodbPut", {
            assumedBy: new aws_iam_1.ServicePrincipal("lambda.amazonaws.com"),
        });
        lambdaPutItemRole.addToPolicy(new aws_iam_1.PolicyStatement({
            actions: ["dynamodb:PutItem"],
            resources: [testTable.tableArn],
        }));
        const lambdaPutItem = new aws_lambda_nodejs_1.NodejsFunction(this, "LambdaPutItem", {
            functionName: "PutItemLambda",
            handler: "main",
            entry: path.join(__dirname, `/functions/putItem.ts`),
            role: lambdaPutItemRole,
        });
        this.putItemFunctionName = lambdaPutItem.functionName;
        // // Get item lambda
        const lambdaGetItemRole = new aws_iam_1.Role(this, "DynamodbGet", {
            assumedBy: new aws_iam_1.ServicePrincipal("lambda.amazonaws.com"),
        });
        lambdaGetItemRole.addToPolicy(new aws_iam_1.PolicyStatement({
            actions: ["dynamodb:GetItem"],
            resources: [testTable.tableArn],
        }));
        const lambdaGetItem = new aws_lambda_nodejs_1.NodejsFunction(this, "LambdaGetItem", {
            functionName: "GetItemLambda",
            handler: "main",
            entry: path.join(__dirname, `/functions/getItem.ts`),
            role: lambdaGetItemRole,
        });
        this.getItemFunctionName = lambdaGetItem.functionName;
        const { task: getItemTask } = new lib_1.DynamodbToolboxGetItem(this, `Get`, {
            //@ts-expect-error
            entity: entity_1.TestEntity,
        });
        console.log("getItemTask", getItemTask);
        const stateMachine = new aws_stepfunctions_1.StateMachine(this, "StepFunction", {
            stateMachineName: "SaveAnimalStepFunction2",
            definition: getItemTask.next(new aws_stepfunctions_1.Succeed(scope, "SuccessTask")),
            stateMachineType: aws_stepfunctions_1.StateMachineType.EXPRESS,
        });
        stateMachine.addToRolePolicy(new aws_iam_1.PolicyStatement({
            actions: ["dynamodb:PutItem"],
            resources: [testTable.tableArn],
        }));
    }
}
const testCase = new TestStack(app, "testStack");
const integ = new integ_tests_alpha_1.IntegTest(app, "testCase", {
    testCases: [testCase],
});
const invokeDynamoDbPut = integ.assertions.invokeFunction({
    functionName: testCase.putItemFunctionName,
    invocationType: integ_tests_alpha_1.InvocationType.REQUEST_RESPONE,
    logType: integ_tests_alpha_1.LogType.NONE,
    payload: JSON.stringify({ type: "Poupou" }),
});
// describe the results of the execution
const invokeDynamoDbGet = integ.assertions.invokeFunction({
    functionName: testCase.getItemFunctionName,
    invocationType: integ_tests_alpha_1.InvocationType.REQUEST_RESPONE,
    logType: integ_tests_alpha_1.LogType.NONE,
    payload: JSON.stringify({ type: "Poupou", id: "uniqueID-test" }),
});
// invokeDynamoDbPut.expect(
//   ExpectedResult.objectLike({ Payload: '"uniqueID-test"' })
// );
const stepFunctionInvoke = integ.assertions.awsApiCall("StepFunctions", "startSyncExecution", {
    stateMachineArn: `arn:aws:states:${aws_cdk_lib_1.Stack.of(testCase).region}:${aws_cdk_lib_1.Stack.of(testCase).account}:stateMachine:SaveAnimalStepFunction2` /* required */,
    input: JSON.stringify({ type: "Poupou", id: "uniqueID-test" }),
});
stepFunctionInvoke.expect(integ_tests_alpha_1.ExpectedResult.objectLike({
    StatusCode: 200,
    ExecutedVersion: "$LATEST",
    Payload: '"uniqueID-test"',
}));
invokeDynamoDbGet.expect(integ_tests_alpha_1.ExpectedResult.objectLike({
    StatusCode: 200,
    ExecutedVersion: "$LATEST",
    Payload: '"uniqueID-test"',
}));
app.synth();
//# sourceMappingURL=data:application/json;base64,